@page "/message/{messageId}"
@using global::Shared;
@layout EmptyLayout
@inject ISnackbar Snackbar
@inject HttpClient httpClient
@inject NavigationManager NavigationManager
@inject IHttpContextAccessor HttpContextAccessor
@using Microsoft.AspNetCore.WebUtilities;

<div class="message-details">
    @if (message != null)
    {
        <MudCard>
            <MudCardHeader @onclick="() => NavigateToUser(message.UserId)">
                <CardHeaderAvatar>
                    <MudAvatar Size="Size.Large">@message.Name.Substring(0, 1).ToUpper()</MudAvatar>
                </CardHeaderAvatar>
                <CardHeaderContent>
                    <MudText Typo="Typo.body1"><strong>@message.Name</strong></MudText>
                    @if (@message.UserRole[0] != "User")
                    {
                        <MudText Typo="Typo.body2">@message.UserRole[0]</MudText>
                    }
                </CardHeaderContent>
            </MudCardHeader>
            
            <MudCardContent>
                <MudText Typo="Typo.body2">@message.Content</MudText>

                @if (openReplyWindow)
                {
                    <div class="reply-section" style="display:flex; flex-direction: row;">

                        <MudTextField @bind-Value=@replyContent Label="Răspuns" Variant="Variant.Outlined" AutoGrow>                     
                            
                            </MudTextField>

                     <MudButton OnClick="PostReply" Color="Color.Primary">Răspunde</MudButton>
                            
                      
                        
                    </div>
                }
            </MudCardContent>
           <MudCardActions>

                @if (!openReplyWindow)
                {

                    <MudButton OnClick="OpenReplyWindow">
                                        <MudIconButton Icon="@Icons.Material.Filled.Reply" Color="Color.Default" />
                                        <p style="padding:0px; margin-top: 0px; margin-bottom:0px;">Reply</p>
                                    </MudButton>
                }
                                </MudCardActions>
        </MudCard>

    }
    else
    {
        <MudText Typo="Typo.h6">Loading...</MudText>
    }
</div>

<style>
    .mud-avatar.mud-avatar-large {
        background-color: #800000;
        color: white;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        cursor:pointer;
    }

    .mud-paper {
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        width: 50%;
    }

    .message-details {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
    }

    .content {
        min-height: 100vh;
    }

    .reply-section {
        margin-top: 20px;
        width: 100%;
        display: flex;
        flex-direction: column;
        align-items: center;
    }

    .mud-card-header-content {
        font-family: "Inter", sans-serif;
        font-optical-sizing: inherit;
        font-weight: 400;
        font-size: 20px;
        font-style: normal;
        font-variation-settings: "slnt" 0;
        color: black;
        cursor: pointer;
    }

</style>

@code {
    [Parameter] public string messageId { get; set; }
    private MessageDto message;
    private bool openReplyWindow = false;
    private string replyContent;

    protected override async Task OnInitializedAsync()
    {
        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("reply", out var reply))
        {
            openReplyWindow = bool.Parse(reply);
        }

        await LoadMessage();
    }

    private async Task LoadMessage()
    {
        if (Guid.TryParse(messageId, out var parsedMessageId))
        {
            try
            {
                message = await httpClient.GetFromJsonAsync<MessageDto>($"/api/messages/{parsedMessageId}");
            }
            catch (Exception ex)
            {
                Snackbar.Add($"Error loading message: {ex.Message}", Severity.Error);
            }
        }
        else
        {
            Snackbar.Add("Invalid message ID format.", Severity.Error);
        }
    }

    public async void OpenReplyWindow()
    {
        openReplyWindow = true;
        StateHasChanged();

    }

    private async Task PostReply()
    {
        if (string.IsNullOrEmpty(replyContent))
        {
            Snackbar.Add("Reply content cannot be empty.", Severity.Warning);
            return;
        }

        var replyDto = new MessageDtoPost
            {
                Content = replyContent,
                IntendedFor = "Community"
            };

        var result = await httpClient.PostAsJsonAsync($"/api/messages/{message.Id}/reply", replyDto);

        if (result.IsSuccessStatusCode)
        {
            Snackbar.Add("Reply posted successfully.", Severity.Success);
            replyContent = string.Empty;
            openReplyWindow = false;
            await LoadMessage(); // Reload the message to reflect the new reply
        }
        else
        {
            Snackbar.Add("Failed to post reply.", Severity.Error);
        }
    }

    private void NavigateToUser(string userId)
    {
        NavigationManager.NavigateTo($"/user/{userId}");
    }
}
