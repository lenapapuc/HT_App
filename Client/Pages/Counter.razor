@page "/counter"
@using MudBlazor
@using Domain 
@inject IJSRuntime JSRuntime
@inject ISnackbar Snackbar

<h1>Messages</h1>

<div>
    <MudButton Variant="Variant.Filled" Color="Color.Primary" @onclick="ToggleAddPostForm">Add Post</MudButton>
</div>

@if (showAddPostForm)
{<style>
    .container
    {
             display: flex;
             justify-content: center; 
             align-items: center;
            
    }
    .post
    {
        padding-top: 10px;
        padding-bottom: 10px;
        width: 600px;
             border-radius: 5px;
             border-color: #4A148C;
             border-style: solid;
             border-width: 1px;
             display: flex;
             flex-direction: column;

             justify-content: center;
             align-items: center;
    }
    .small-mud-textfield
{
    width: 400px;
}
</style>
<div class="container">
    <div class="post">
        <MudTextField @bind-Value="@newPostContent" Label="Standard" Variant="Variant.Text" Margin="Margin.Dense"
                                    AutoGrow Class="small-mud-textfield"></MudTextField>

        <div>
          <MudStack Style="width: 400px">
                 <MudFileUpload T="IReadOnlyList<IBrowserFile>"
                                      AppendMultipleFiles
                                OnFilesChanged="OnInputFileChanged"
                                Hidden="@false"
                                InputClass="absolute mud-width-full mud-height-full overflow-hidden z-20"
                                InputStyle="opacity:0"
                 @ondragenter="@SetDragClass"
                 @ondragleave="@ClearDragClass"
                 @ondragend="@ClearDragClass">
                     <ButtonTemplate>
                         <MudPaper Height="300px"
                                   Outlined="true"
                                   Class="@_dragClass">
                             <MudText Typo="Typo.h6">
                                 Drag and drop files here or click
                             </MudText>
                             @foreach (var file in _fileNames)
                            {
                                <MudChip Color="Color.Dark" Text="@file" />
                            }
                        </MudPaper>
                        <MudToolBar DisableGutters="true"
                                    Class="relative d-flex justify-end gap-4 z-30">
                            <MudButton HtmlTag="label"
                                       Color="Color.Primary"
                                       for="@context.Id"
                                       Variant="Variant.Filled">
                                Open file picker
                            </MudButton>
                            <MudButton OnClick="@Upload"
                                       Color="Color.Primary"
                                       Disabled="@(!_fileNames.Any())"
                                       Variant="Variant.Filled">
                                Upload
                            </MudButton>
                            <MudButton OnClick="@Clear"
                                       Color="Color.Error"
                                       Disabled="@(!_fileNames.Any())"
                                       Variant="Variant.Filled">
                                Clear
                            </MudButton>
                        </MudToolBar>
                    </ButtonTemplate>
                </MudFileUpload>
            </MudStack>
         
    </div>
        
    <MudButton Variant="Variant.Filled" Color="Color.Primary" @onclick="AddPost">Submit</MudButton>
    </div>
    </div>
   
}
<div>
    @foreach (var message in messages)
    {
        <div>
            <MudText Typo="Typo.h2"> @message.Content</MudText>
            @if (message.Replies != null && message.Replies.Count != 0)
            {
                <div>
                    @foreach (var reply in message.Replies)
                    {
                        <p>@reply.Content</p>
                    }
                </div>
            }
        </div>
    }
</div>




@code {
    private bool showAddPostForm = false;
    private string newPostContent = "";
    private List<Message> messages;
    private const string DefaultDragClass = "relative rounded-lg border-2 border-dashed pa-4 mt-4 mud-width-full mud-height-full z-10";
    private string _dragClass = DefaultDragClass;
    private readonly List<string> _fileNames = new();


    private async Task Clear()
    {
        _fileNames.Clear();
        ClearDragClass();
        await Task.Delay(100);
    }

    private void OnInputFileChanged(InputFileChangeEventArgs e)
    {
        ClearDragClass();
        var files = e.GetMultipleFiles();
        foreach (var file in files)
        {
            _fileNames.Add(file.Name);
        }
    }

    private void Upload()
    {
        // Upload the files here
        Snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopCenter;
        Snackbar.Add("TODO: Upload your files!");
    }

    private void SetDragClass()
        => _dragClass = $"{DefaultDragClass} mud-border-primary";

    private void ClearDragClass()
        => _dragClass = DefaultDragClass;



    protected override void OnInitialized()
    {
        base.OnInitialized();
        LoadMessages();
    }

    private void LoadMessages()
    {
        // Instantiate an instance of Class and call GiveMeMessages method
        var classInstance = new Class();
        messages = classInstance.GiveMeMessages();
    }

    private void ToggleAddPostForm()
    {
        showAddPostForm = !showAddPostForm;
    }

    private void AddPost()
    {
        // Add logic to handle adding the post with newPostContent
        newPostContent = "";
        showAddPostForm = false;
    }
}
