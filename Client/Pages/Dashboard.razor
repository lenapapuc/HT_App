@page "/dashboard"
@layout EmptyLayout
@inherits LayoutComponentBase
@inject UserManager<User> UserManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@using Microsoft.AspNetCore.Identity;
@using MudBlazor
@using Domain
@using global::Shared
@inject IJSRuntime JSRuntime
@inject ISnackbar Snackbar
@inject HttpClient httpClient
@inject AuthenticationStateProvider AuthenticationStateProvider


@inject IDialogService DialogService

<style>
    .background {
        padding: 0px;
        width: 100%;
        height: 100%;
        display: flex;
        justify-content: center;
        align-items: center;
        flex-direction: column
    }

    .message-div
    {
        border-color: black;
        border-width: 1px;
        background-color: tan;
        margin-bottom: 5px;
       

    }
    .mud-card-actions
    {
        align-items: center;
    }

    .messages
    {
        width: inherit;
        padding-left: 30px;
    }

    .message
    {
        padding-bottom: 20px;
    }

    .button-class
    {
        padding-bottom: 20px;
    }

    .top-row 
    {
        background-color: #f7f7f7;
        border-bottom: 1px solid #d6d5d5;
        justify-content: flex-end;
        height: 3.5rem;
        display: flex;
        align-items: center;
        width: inherit;
        padding: 0px;
        margin-bottom: 20px;

    }
</style>
<AuthorizeView>
    <Authorized>
<div class="background">
    <div class="top-row">
        <LoginDisplay />

    </div>
    <h1 class="message">DISCUȚII FORUM</h1>
    <div class="button-class">
        <MudButton @onclick="OpenDialog" Variant="Variant.Filled" Color="Color.Primary">
            Începe o discuție
        </MudButton>
     </div>
    <div class="messages">
        @foreach (var message in messages.OrderByDescending(m => m.CreatedAt))
        {
                    var avatarColor = GetRandomAvatarColor();
            <MudCard Style="margin-bottom: 10px; width: 50%;">
                <MudCardHeader>
                    <CardHeaderAvatar>
                                <MudAvatar Color="@avatarColor">@message.Name.Substring(0, 1).ToUpper()</MudAvatar>
                    </CardHeaderAvatar>
                    <CardHeaderContent>
                        <MudText Typo="Typo.body1">@message.Name</MudText>
                        <MudText Typo="Typo.body2">Intended for: @message.IntendedFor</MudText>
                    </CardHeaderContent>
                    <CardHeaderActions>
                        <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error" OnClick="@(async () => await Delete(message.Id))" />
                    </CardHeaderActions>
                </MudCardHeader>

                <MudCardContent>
                    <MudText Typo="Typo.body2">@message.Content</MudText>
                </MudCardContent>
                <MudCardActions>
                    <MudIconButton Icon="@Icons.Material.Filled.Reply" Color="Color.Default" />
                    <p style="padding:0px; margin-top: 0px; margin-bottom:0px;">Reply</p>
                    <MudIconButton Icon="@Icons.Material.Filled.Share" Color="Color.Default" />
                </MudCardActions>
            </MudCard>
        }


        
    </div>

  

</div>
    </Authorized>
    <NotAuthorized>
        <MudText Typo="Typo.h6">You are not authorized to view this page. Redirecting to login...</MudText>
    </NotAuthorized>
</AuthorizeView>

@code {
    [Inject] private NavigationManager NavigationManager { get; set; }

    private List<MessageDto> messages = new List<MessageDto>();
    private bool isAuthorized = false;
    private User currentUser;


    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        isAuthorized = authState.User.Identity.IsAuthenticated;

        


        if (user.Identity.IsAuthenticated )
        {

            await LoadMessages();
        }
        else
        {
            await Task.Delay(3000);
            NavigationManager.NavigateTo("Identity/Account/Login");
        }

       
        
    }

    private void OpenDialog()
    {
        var options = new DialogOptions { CloseOnEscapeKey = true };
        DialogService.Show<Dialog>("Începe o discuție", options);
    }

    private async Task LoadMessages()
    {
        messages = await httpClient.GetFromJsonAsync<List<MessageDto>>("/api/messages/community");
        // Sort the messages by CreatedAt in descending order
        messages = messages.OrderByDescending(m => m.CreatedAt).ToList();
        StateHasChanged(); // Refresh the UI after loading messages
    }

    private async Task Delete(string id)
    {
        if (Guid.TryParse(id, out Guid guidId))
        {
            var response = await httpClient.DeleteAsync($"/api/messages/{guidId}");
            if (response.IsSuccessStatusCode)
            {
                messages.RemoveAll(m => m.Id == id);
                Snackbar.Add("Message deleted successfully.", Severity.Success);
                StateHasChanged();
            }
            else
            {
                Snackbar.Add("Failed to delete the message.", Severity.Error);
            }
        }
        else
        {
            Snackbar.Add("Invalid message ID.", Severity.Error);
        }
    }

    private List<Color> avatarColors = new List<Color> { Color.Primary, Color.Secondary, Color.Tertiary };

    // Method to generate a random color from the avatarColors list
    private Color GetRandomAvatarColor()
    {
        var random = new Random();
        var index = random.Next(0, avatarColors.Count);
        return avatarColors[index];
    }
}