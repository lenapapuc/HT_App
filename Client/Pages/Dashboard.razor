@page "/dashboard"
@layout EmptyLayout
@inherits LayoutComponentBase
@inject UserManager<ApplicationUser> UserManager
@inject SignInManager<ApplicationUser> SignInManger
@inject AuthenticationStateProvider AuthenticationStateProvider
@using Microsoft.AspNetCore.Identity;
@using MudBlazor
@using Domain
@using System.Security.Claims;
@using global::Shared
@inject IJSRuntime JSRuntime
@inject ISnackbar Snackbar
@inject HttpClient httpClient
@inject AuthenticationStateProvider AuthenticationStateProvider
@using Microsoft.AspNetCore.Components.Authorization



@inject IDialogService DialogService

<style>
    .left-side {
        width: 70%;
        display: flex;
        flex-direction: column;
        align-items: center;
    }

    .right-side {
        width: 30%;
        margin-right: 100px;
        background-color: #D9D9D9;
        height: 920px;
        display: flex;
        flex-direction: column;
        justify-content: start;
        align-items: start;
        padding: 30px;
        border-radius: 8px;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        margin-bottom: 20px;
    }

    .dialogue {
        height: 125px;
        width: 70%;
        display: flex;
        justify-content: space-between;
        margin-bottom: 20px;
        background-color: #fff;
        padding: 20px;
        border-radius: 8px;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        margin-bottom: 20px;
    }

    .sides {
        width: inherit;
        height: 100%;
        display: flex;
    }

    .background {
        padding: 0px;
        width: 100%;
        height: 100%;
        display: flex;
        justify-content: center;
        align-items: center;
        flex-direction: column
    }

    .custom-font {
        font-family: 'Inter', sans-serif; /* Use Roboto font, fallback to sans-serif */
        /* Add other font properties as needed */
    }


    .inter-message {
        font-family: "Inter", sans-serif;
        font-optical-sizing: auto;
        font-weight: 800;
        font-style: normal;
        font-variation-settings: "slnt" 0;
        color: black;
        padding-bottom: 20px;
    }



    .message-div {
        font-family: "Inter", sans-serif;
        font-optical-sizing: inherit;
        font-weight: 400;
        font-size: 20px;
        font-style: normal;
        font-variation-settings: "slnt" 0;
        color: black;
        border-color: black;
        border-width: 1px;
        background-color: tan;
        margin-bottom: 5px;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    }

    .mud-card-actions {
        align-items: center;
    }

    .mud-avatar-filled.mud-avatar-filled-primary {
        background-color: #800000;
        cursor: pointer;
    }

    .mud-avatar-filled {
        background-color: #800000;
        color: white;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        cursor: pointer;
    }

    .messages {
        width: 70%;
        background-color: #fff;
        padding: 20px;
        border-radius: 8px;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        margin-bottom: 20px;
        max-height: 700px; /* Set a fixed height */
        min-height: 100px;
        overflow-y: auto; /* Enable vertical scrolling */

        font-family: 'Inter', sans-serif;
    }

    .mud-elevation-1 {
        box-shadow: unset;
    }

    .mud-paper {
        border-bottom: 1px solid #e0e0e0;
    }

    .message {
        padding-bottom: 30px;
    }

    .button-class {
        padding-bottom: 20px;
    }

    .mud-card-header-content {
        font-family: "Inter", sans-serif;
        font-optical-sizing: inherit;
        font-weight: 400;
        font-size: 20px;
        font-style: normal;
        font-variation-settings: "slnt" 0;
        color: black;
        cursor: pointer;

    }



    .disc {
        font-family: "Inter", sans-serif;
        font-optical-sizing: inherit;
        font-weight: 400;
        font-size: 20px;
        font-style: normal;
        font-variation-settings: "slnt" 0;
        color: black;
        height: inherit;
        width: 40%;
        display: flex;
        flex-direction: column;
        align-items: start;
        justify-content: center;
        padding-left: 0;
    }

    .psmd {
        font-family: "Inter", sans-serif;
        top: 0;
        font-weight: 800;
        font-size: 20px;
        font-style: normal;
        font-variation-settings: "slnt" 0;
        color: black;
        height: inherit;
    }


    .posts {
        display: flex;
        flex-direction: column;
        align-items: center;
    }

</style>
<AuthorizeView>
    <Authorized>
        <div class="background">

            <div class="sides">
                <div class="left-side">
                    <h1 class="inter-message">DISCUȚII FORUM</h1>

                    <button class="dialogue" @onclick="OpenDialog" Variant="Variant.Filled" Color="Color.Primary">
                        <div style="width:30%; height: inherit; display:flex; justify-content:center; align-items:center">
                            <MudAvatar Color="Color.Primary" Size="Size.Large">@userInitial</MudAvatar>
                        </div>
                        <div class="disc">
                            <p style="padding-bottom:0; margin-bottom:0; padding-top: 30px;">Începe o discuție...</p>
                            <div class="icons">
                                <MudIconButton Icon="@Icons.Material.Filled.AttachFile" Color="Color.Dark" />
                                <MudIconButton Icon="@Icons.Material.Filled.Image" Color="Color.Dark" />
                                <MudIconButton Icon="@Icons.Material.Filled.InsertEmoticon" Color="Color.Dark" />
                            </div>
                        </div>
                        <div class="buton" style="width:30%; height: inherit; display:flex; justify-content:center; align-items:center">
                            <buttton style="height:auto; background-color: #170202; color: white; padding: 10px; border-radius: 20px;">Postează</buttton>
                        </div>
                    </button>

                    <div class="messages">
                        @foreach (var message in messages.OrderByDescending(m => m.CreatedAt))
                        {
                            <MudCard Style="margin-bottom: 10px;">
                                <MudCardHeader @onclick="() => NavigateToUser(message.UserId)">
                                    <CardHeaderAvatar>
                                        <MudAvatar Size="Size.Large" @onclick="() => NavigateToUser(message.UserId)">@message.Name.Substring(0, 1).ToUpper()</MudAvatar>
                                    </CardHeaderAvatar>
                                    <CardHeaderContent >
                                        <MudText Typo="Typo.body1"><strong>@message.Name</strong></MudText>
                                        @if(message.UserRole[0] != "User"){
                                            <MudText Typo="Typo.body2"> @message.UserRole[0]</MudText>
                                        }
                                    </CardHeaderContent>

                                    <CardHeaderActions>
                                        @if (isUserInRole("Moderator"))
                                        {
                                            <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error" OnClick="@(async () => await Delete(message.Id))" />
                                        }
                                    </CardHeaderActions>
                                </MudCardHeader>

                                <MudCardContent @onclick="() => NavigateToMessage(message.Id, false)">
                                    <MudText Typo="Typo.body2">@message.Content</MudText>
                                    <p style="padding:0px; margin-top:0px; margin-bottom:0px;">@message.RepliesNumber replies</p>
                                </MudCardContent>
                                <MudCardActions>
                                    <MudButton OnClick="() => NavigateToMessage(message.Id, true)">
                                        <MudIconButton Icon="@Icons.Material.Filled.Reply" Color="Color.Default" />
                                        <p style="padding:0px; margin-top: 0px; margin-bottom:0px;">Reply</p>
                                    </MudButton>
                                </MudCardActions>
                            </MudCard>
                        }
                    </div>
                </div>

                <div class="right-side">
                    <div style="margin:0;padding:0; height:fit-content;" class="psmd">
                        <p>CONȚINUT CREAT DE MODERATORI ȘI PSIHOLOGI</p>
                    </div>
                    <div style="text-decoration: underline;" class="posts">
                        <!-- Add some example content here -->
                        <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Integer nec odio. Praesent libero. Sed cursus ante dapibus diam...</p>
                        <p>Sed nisi. Nulla quis sem at nibh elementum imperdiet. Duis sagittis ipsum. Praesent mauris...</p>
                        <p>Fusce nec tellus sed augue semper porta. Mauris massa. Vestibulum lacinia arcu eget nulla..  .</p>
                        <p>Class aptent taciti sociosqu ad litora torquent per conubia nostra, per inceptos himenaeos...</p>
                    </div>
                </div>
            </div>
        </div>
    </Authorized>
    <NotAuthorized>
        <MudText Typo="Typo.h6">You are not authorized to view this page. Redirecting to login...</MudText>
    </NotAuthorized>
</AuthorizeView>

@code {
        [Inject] private NavigationManager NavigationManager { get; set; }

    private AuthenticationState authState;
    private List<MessageDto> messages = new List<MessageDto>();
    private bool isAuthorized = false;
    private System.Security.Claims.ClaimsPrincipal currentUser;
    private string userInitial = "";
    private string newMessageError = "";
    private MessageDtoPost message = new();

    private bool isUserInRole(string role)
    {
        return authState.User.IsInRole(role);
    }

    protected override async Task OnInitializedAsync()
    {
        authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        currentUser = authState.User;
        isAuthorized = authState.User.Identity.IsAuthenticated;
        if (user.Identity.IsAuthenticated)
        {
            userInitial = user.Identity.Name.Substring(0, 1).ToUpper();
            await LoadMessages();
        }
        else
        {
            await Task.Delay(3000);
            NavigationManager.NavigateTo("Identity/Account/Login");
        }
    }

    private void OpenDialog()
    {
        var options = new DialogOptions { CloseOnEscapeKey = true };
        DialogService.Show<Dialog>("Începe o discuție", options);
    }

    private async Task LoadMessages()
    {
        messages = await httpClient.GetFromJsonAsync<List<MessageDto>>("/api/messages/community");
        // Sort the messages by CreatedAt in descending order
        messages = messages.OrderByDescending(m => m.CreatedAt).ToList();
        StateHasChanged(); // Refresh the UI after loading messages
    }

    private async Task Delete(string id)
    {
        if (Guid.TryParse(id, out Guid guidId))
        {
            var response = await httpClient.DeleteAsync($"/api/messages/{guidId}");
            if (response.IsSuccessStatusCode)
            {
                messages.RemoveAll(m => m.Id == id);
                Snackbar.Add("Message deleted successfully.", Severity.Success);
                StateHasChanged();
            }
            else
            {
                Snackbar.Add("Failed to delete the message.", Severity.Error);
            }
        }
        else
        {
            Snackbar.Add("Invalid message ID.", Severity.Error);
        }
    }

    public async Task PostReply(string Id)
    {
        if (currentUser == null)
        {
            await JSRuntime.InvokeVoidAsync("alert", "Utilizatorul nu este autentificat.");
            return;
        }

        var userId = currentUser.FindFirst(ClaimTypes.NameIdentifier)?.Value;
        if (string.IsNullOrEmpty(userId))
        {
            await JSRuntime.InvokeVoidAsync("alert", "User ID not found.");
            return;
        }

        message.UserId = userId;
        Guid messageId = Guid.Parse(Id);
        message.Content = "lalala";
        message.IntendedFor = "Community";
        var result = await this.httpClient.PostAsJsonAsync($"/api/messages/{messageId}/reply", message);

        if (!result.IsSuccessStatusCode)
            newMessageError = await result.Content.ReadAsStringAsync();
        else
        {
            newMessageError = string.Empty;
            message = new();
            StateHasChanged();
            NavigationManager.NavigateTo("/dashboard");
        }
    }

    private void NavigateToMessage(string messageId, bool reply)
    {
        if (reply)
        {
            NavigationManager.NavigateTo($"/message/{messageId}?reply=true");
        }
        else
        {
            NavigationManager.NavigateTo($"/message/{messageId}");
        }
    }

    private void NavigateToUser(string userId)
    {
        NavigationManager.NavigateTo($"/user/{userId}");
    }
}
