@inject HttpClient httpClient

@using Microsoft.AspNetCore.Identity;
@using MudBlazor
@inject IJSRuntime JSRuntime
@inject UserManager<ApplicationUser> UserManager
@inject AuthenticationStateProvider AuthenticationStateProvider




@inject ISnackbar Snackbar

@using global::Shared;
<div class="dialog">
    <MudDialog>
        <DialogContent>
            <MudAvatar Color="Color.Primary" Size="Size.Large">@currentUser.Name.Substring(0,1).ToUpper()</MudAvatar>
            <div class="content">
                <MudTextField @bind-Value="@message.Content" Style="width: 380px; display=flex; justify-content:end;" T="string" Label="AutoGrow" Variant="Variant.Text" AutoGrow HelperText="This field grows when you enter new lines" />
                 <div class="icons">
                     <MudFileUpload T="IBrowserFile" FilesChanged="UploadFiles">
                         <ButtonTemplate>
                             <MudIconButton HtmlTag="label"
                                            Color="Color.Dark"
                                            Icon="@Icons.Material.Filled.Image"
                                            for="@context.Id">
                             </MudIconButton>
                         </ButtonTemplate>
                     </MudFileUpload>


                 </div>
             </div>


         </DialogContent>


         <DialogActions>
             <div class="actions">
                 <h6>Alege cu cine să împărtășești: </h6>
                 <div class="checkboxes">

                     <MudCheckBox @bind-Value="@CheckBox1" Color="Color.Primary" Label="Comunitate"></MudCheckBox>
                
                     <MudCheckBox @bind-Value="@CheckBox2" Color="Color.Primary" Label="Psiholog"></MudCheckBox>
                     <MudCheckBox @bind-Value="@CheckBox3" Color="Color.Primary" Label="Moderator"></MudCheckBox>


                 </div>

                 <MudButton Color="Color.Primary" OnClick="Submit">Postează</MudButton>
             </div>
         </DialogActions>
     </MudDialog>
 </div>


 <style>
     .mud-dialog .mud-dialog-actions {
         justify-content: flex-start;
         width: 500px;
     }

     .mud-dialog .mud-dialog-content {
         padding: 8px;
     }
     .dialog {
         width: 600px;
         border-radius: 400px;
         display: flex;
         flex-direction: column;
         justify-content: center;
         align-items: center;
         padding: 10px;
     }

     .text {
         width: 20px;
     }

     .mud-dialog-content {
         padding: 0px;
         width: 500px;
         display: flex;
         justify-content: space-between; /* Distribute items evenly along the main axis */
     }

     .content {
         padding-top: 0;
     }

     .checkboxes {
         padding-top: 5px;
         display: flex;
         justify-content: space-between;
     }

     .actions {
         display: flex;
         flex-direction: column;
         width: inherit;
     }
 </style>

 @code {
    [Inject] private NavigationManager NavigationManager { get; set; }
    [Inject] private IDialogService DialogService { get; set; }



    string SelectedValue { get; set; }
    bool folderOneExpanded;
    bool folderTwoExpanded;

    public bool CheckBox1 { get; set; } = false;

    public bool CheckBox3 { get; set; } = false;
    public bool CheckBox2 { get; set; } = false;

    private string newMessageError = "";
    public MessageDtoPost message = new();
    private ApplicationUser currentUser;

    [CascadingParameter] MudDialogInstance MudDialog { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            // Get the currently logged-in user
            currentUser = await UserManager.GetUserAsync(user);
        }
        else
        {
            // Handle unauthenticated state if needed
        }
    }


    public async Task Submit()
    {
        if (currentUser == null)
        {
            await JSRuntime.InvokeVoidAsync("alert", "Utilizatorul nu este autentificat.");
            return;
        }

        message.UserId = currentUser.Id.ToString();
  

        if (CheckBox1 == false && CheckBox2 == false && CheckBox3 == false)
        {
            await JSRuntime.InvokeVoidAsync("alert", "Selectați un recipient");


        }

        else if (CheckBox1 == true && CheckBox2 == false && CheckBox3 == false) message.IntendedFor = "Community";
        else if (CheckBox2 == true && CheckBox3 == false && CheckBox1 == false) message.IntendedFor = "Psychologist";
        else if (CheckBox3 == true && CheckBox2 == false && CheckBox1 == false) message.IntendedFor = "Moderator";
        else
        {
            await JSRuntime.InvokeVoidAsync("alert", "Selectați un singur recipient");
            return;
        }

        var result = await this.httpClient.PostAsJsonAsync("/api/messages", message);

        // Your existing code here
        if (!result.IsSuccessStatusCode)
            newMessageError = await result.Content.ReadAsStringAsync();
        else
        {
            newMessageError = string.Empty;
            message = new();
            StateHasChanged();
            NavigationManager.NavigateTo("/dashboard");
           


        }

    }
    IList<IBrowserFile> files = new List<IBrowserFile>();
    private void UploadFiles(IBrowserFile file)
    {
        files.Add(file);
    }


}
