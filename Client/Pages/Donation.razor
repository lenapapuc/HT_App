@page "/donation"

@layout EmptyLayout

@using MudBlazor
@using Domain
@using global::Shared
@inject IJSRuntime JSRuntime
@inject ISnackbar Snackbar
@inject HttpClient httpClient
@inject IDialogService DialogService
@inject NavigationManager Navigation

<MudGrid>
    <MudItem xs="6">
        <MudPaper Class="pa-4">
            <MudText Typo="Typo.h4" Class="title_color">Alege suma donației</MudText>
            <MudGrid>
                <MudItem xs="4">
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="() => SetAmount(1000)" Class="amount-button">1000 Lei</MudButton>
                </MudItem>
                <MudItem xs="4">
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="() => SetAmount(500)" Class="amount-button">500 Lei</MudButton>
                </MudItem>
                <MudItem xs="4">
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="() => SetAmount(200)" Class="amount-button">200 Lei</MudButton>
                </MudItem>
                <MudItem xs="4">
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="() => SetAmount(100)" Class="amount-button">100 Lei</MudButton>
                </MudItem>
                <MudItem xs="4">
                    <MudTextField @bind-Value="customAmount" Placeholder="Other Amount" OnBlur="() => SetAmount(customAmount)" />
                </MudItem>
            </MudGrid>
            <MudText Typo="Typo.h6" Class="amount-total">Amount: @amount Lei</MudText>
        </MudPaper>
    </MudItem>
    <MudItem xs="6">
        <MudPaper Class="pa-4">
            <MudText Typo="Typo.h4" Class="title_color">Introdu datele bancare</MudText>
            <MudTextField Label="Card Holder Name" @bind-Value="cardHolderName" Required Immediate="true" OnInput="FormatCardHolderName" />
            <MudTextField Label="Card Number" @bind-Value="cardNumber" Required Immediate="true" OnInput="FormatCardNumber" />
            <MudGrid>
                <MudItem xs="6">
                    <MudTextField Label="Expiration Date (MM/YY)" @bind-Value="expirationDate" Required Immediate="true" OnInput="FormatExpirationDate" />
                </MudItem>
                <MudItem xs="6">
                    <MudTextField Label="CVV" @bind-Value="cvv" Required Immediate="true" OnInput="FormatCVV" />
                </MudItem>
            </MudGrid>
            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="ProcessTransaction" Class="approve-trans">Continuă cu tranzacția</MudButton>
            <MudButton Variant="Variant.Outlined" Color="Color.Secondary" OnClick="CancelTransaction" Class="cancel-trans">Anulează tranzacția</MudButton>
        </MudPaper>
    </MudItem>
</MudGrid>

<style>
    .amount-total {
        margin-top: 30px; /* Add space between the text and button */
    }

    .amount-button {
        margin-top: 25px; /* Add space between the text and button */
    }

    .cancel-trans {
        margin-top: 10px; /* Add space between the text and button */
    }

    .approve-trans {
        margin-top: 10px; /* Add space between the text and button */
        margin-right: 25px; 
    }

    .top-row {
        margin-bottom: 0;
    }

    .title_color {
        color: #800000; /* Match color with the header and footer */
    }
</style>

@code {
    private int amount;
    private string customAmount;
    private string cardHolderName;
    private string cardNumber;
    private string expirationDate;
    private string cvv;

    private void SetAmount(int value)
    {
        amount = value;
    }

    private void SetAmount(string value)
    {
        if (int.TryParse(value, out int result))
        {
            amount = result;
        }
    }

    private void FormatCardHolderName(ChangeEventArgs e)
    {
        cardHolderName = new string(e.Value.ToString().ToUpper().Where(char.IsLetter).ToArray());
    }

    private void FormatCardNumber(ChangeEventArgs e)
    {
        cardNumber = new string(e.Value.ToString().Where(char.IsDigit).ToArray());
        if (cardNumber.Length > 16)
        {
            cardNumber = cardNumber.Substring(0, 16);
        }
        cardNumber = string.Join(" ", Enumerable.Range(0, cardNumber.Length / 4).Select(i => cardNumber.Substring(i * 4, 4)));
    }

    private void FormatExpirationDate(ChangeEventArgs e)
    {
        var value = e.Value.ToString().Where(char.IsDigit).ToArray();
        if (value.Length > 4)
        {
            value = value.Take(4).ToArray();
        }
        expirationDate = value.Length >= 2 ? $"{new string(value.Take(2).ToArray())}/{new string(value.Skip(2).ToArray())}" : new string(value);
    }

    private void FormatCVV(ChangeEventArgs e)
    {
        cvv = new string(e.Value.ToString().Where(char.IsDigit).ToArray());
        if (cvv.Length > 3)
        {
            cvv = cvv.Substring(0, 3);
        }
    }

    private void ProcessTransaction()
    {
        Snackbar.Add("Transaction Completed", Severity.Success);
        Task.Delay(5000).ContinueWith(t => Navigation.NavigateTo("/"));
    }

    private void CancelTransaction()
    {
        Navigation.NavigateTo("/");
    }
}
