@using global::Shared;
@inject HttpClient httpClient

@code {
    [Parameter] public string messageId { get; set; }
    [Parameter] public bool ShowReplies { get; set; }
    [Parameter] public EventCallback OnClose { get; set; }
    private List<MessageDto> replies;

    protected override async Task OnInitializedAsync()
    {
        replies = new();
        if (ShowReplies)
        {
            replies = await httpClient.GetFromJsonAsync<List<MessageDto>>($"/api/messages/{messageId}/replies");
        }
    }
}

@if (ShowReplies && replies.Count != 0) 
{
    <div class="replies">
        <button @onclick="CloseReplies">Close</button>
        <h3>Replies</h3>
        @foreach (var reply in replies)
        {
            <div class="reply">
                <MudCard Style="margin-bottom: 10px;">
                    <MudCardHeader>
                        <CardHeaderAvatar>
                            <MudAvatar Size="Size.Large">@reply.Name.Substring(0, 1).ToUpper()</MudAvatar>
                        </CardHeaderAvatar>
                        <CardHeaderContent>
                            <MudText Typo="Typo.body1"><strong>@reply.Name</strong></MudText>
                            @if (reply.UserRole[0] != "User")
                            {
                                <MudText Typo="Typo.body2">@reply.UserRole[0]</MudText>
                            }
                        </CardHeaderContent>
                    </MudCardHeader>
                    <MudCardContent>
                        <MudText Typo="Typo.body2">@reply.Content</MudText>
                    </MudCardContent>
                </MudCard>
            </div>
        }
    </div>
}

@code {
    private void CloseReplies()
    {
        ShowReplies = false;
        OnClose.InvokeAsync();
    }
}
